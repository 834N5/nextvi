NEATVI
======

Neatvi is a vi/ex editor.  It can edit bidirectional UTF-8 text.
Original software by Ali Gholami Rudi:
https://github.com/aligrudi/neatvi

FORK CHANGES
------------
1. Added unindent keybind: ^w 
2. Added quickexit to insert mode keybind: kj   
It's important to understand that this has a caveat, if
input comes too fast, for example a paste from terminal and
the sequence has "kj" in it, insert mode will be cancelled mid way
and paste will be wrong. Luckly this almost never happens because
such letter combination is extremely rare.
Can be disabled via :se noqe
3. Added linenumbers, keybind: # 
4. Added invisible character view, keybind: V   
5. Added regex for changing spaces to tabs, keybind: vi
6. Added regex for removing /r in dos files, keybind: vo
7. Changed behavior of ^a to change search direction when no more match 
8. Added fssearch, searches what is under the cursor 
in every file in the opened directory keybind: ^] or ^5
Beware that it will brute force open files into buffers and
perform the search. I usually save really often so this isn't 
a problem, but being careless might reload file with unsaved changes.
By default it only checks for .c and .h files. 
for code navigation between files, jump to definitions / etc.
9. fssearch but going in reverse keybind: ^p
10. Added key to change the mark origin which ^p will return to keybind: ^t
11. Added ex command "ea" which opens file case insensitive and ignores the path,
setting an extra number parameter after filename will skip that many matches with
similar path. So for example file might be named "file123.c" but you can open it
just by "ea fi" if this is a uniquely matched filename
12. Added ex command "dir" to set the directory for fssearch or "ea" ex command
13. Added numbered buffers to vi, max 10 and ex "b" command to show buffers
and "b%d" to switch (where %d is the buffer number).
14. Added key to show buffers and switch buffer 
(to switch press corresponding 0-9 number) keybind: ^7
15. Added key to exit vi keybind: qq 
16. Added key to goto line 0 keybind: gg 
17. Added key to delete everything inside (cursor outside) "" keybind: di" 
18. Added key to delete everything inside () keybind: di) 
19. Added key to delete everything inside (cursor outside) () keybind: di( 
20. Added key to change . to -> on cursor line keybind: vh
21. Added key to change -> to . on cursor line keybind: vg
22. Added ex command "z" it does the same thing "!" does but the shell is
launched in interactive mode, so stuff like aliases work. But it will cause
vi to suspend.
23. Changed the colors for C language in conf.h to be sane
24. Added extra highlight keywords for C
25. Added key that splits the line (opposite of J) keybind: K
26. Added key that line wraps text to 80 line limit keybind: gq 
keybind: gw does the same but floors to the last word and is also
much slower.
27. Added key that does multiline repeated edits keybind: v.
This is based on your last commands and insertions and reqires and
argument for how many lines to repeat said operation. When last
operation was 'i' or other commands that enter insert mode
and some text, that text will be placed at the same offset on 
N number of lines specified by the vi_arg1. Direction: top to bottom
28. Added ability to view the numbers for arguments that keys e,w,E,W,b,B
may take. keybind: ^v Pressing again will change the key mode, specifying
any arguments will exit the mode. This is a major step up to how navigation
works in vi, it makes it so much easier to use because now you can see where 
you are going. If not anything else I suggest you to try out this distro
just to see it in action.
29. Added ability to change highlight dynamically.
30. New ex option "hww" which highlights every instance of word under the
cursor when enabled. Useful for when studying source code.
31. Added autocomplete in insert mode. Press ^g to index the current opened
file. Then you can press ^n to cycle though the options, results are based on
the contents of the file and the closest match to what you typed. Use ^r to
cycle in reverse.
32. Added ex command "inc" which sets the filename filter for the feature
mentioned in (8.) This is not limited to one argument, 
separate entries by space.
33. Added hund keybind: \
A minimalistic terminal file manager.
#### Features
- Vim-inspired hotkeys
- Dual-panel, Vim-like, minimalistic UI
- UTF-8 + wide character support
- Move/remove/copy/rename/chmod/chown selected files
- Recursive chmod with set/unset masks
- Find file in current directory (find as you type)
- Multiple key sorting
- One column at a time (none, size, perm, user, group, atime, ctime, mtime...)
- Marks
- Quick access to shell via `:sh`
- Can be statically linked
#### Environment Variables (which Hund uses)
| Variable | Usage | Default/Fallback |
|-|-|-|
| $VISUAL | $EDITOR | text editor | vi |
| $HOME | user's home directory | /etc/passwd |
| $SHELL | shell used by `:sh` | sh |
#### Commands
Type `?` while in hund for help.
#### Name
_Hund_ is a German word for _dog_.
34. Added key to save current file keybind: ^k
35. The new special character "/" for ft in conf.h now signifies that 
the regex will be applied on any file. The reason "/" was 
chosen because it's forbidden filename character on unix. It used 
to be "" but in C will make a ptr value of 0, which breaks strcmp
which is used to match highlights.
36. PLACEHOLDER (deleted feature) 
37. Added history buffer for ex commands when in vi prompt.
keybind: ^b or vb (from normal) will open the buffer with all previous 
commands move the cursor to wanted command and exit buffer with qq  
will copy the command into prompt. You can also use this
when half way through some command and need to access normal
mode to edit the command more efficiently.
38. Added key to grab the current word under the cursor into 
prompt like so :%s/.../ keybind: vr
39. Added ex option to change number of spaces in a tab (\t)
default is set to 8. use :se tbs=N  (N is number of spaces)
This will also affect how feature in (5.) works.
40. Added partial support for multiline block regex, for
example C multiline comments syntax highlight.
41. Made lowest row to not waste any space when there
are no messages and actually display the row.
42. Search via '/' or '?' automatically centers and redraws
screen. This partly because change in 41 makes the bottom row
behave dynamically and you might get search result on displayed
on that row, which will be covered by search message instead. 
Also, centering is nice because you always know where to expect
the result to be with your eyes.
43. Added terminal clean up on exit
44. Added a key to perform relative word replacements keybind: vt
Specify arg and the word under the cursor will be placed into prompt,
for example :.,.+5s/\<word\>/ where 5 is the arg.
45. Improved single line performance by roughly 3x
46. Added key to abondon insert discarding any changes keybind: ^x
47. Added Russian keymap, and changed how xkmap_alt works, now
z + arg in normal mode will switch what keymap ^f key changes,
so for example 1 = fa 2 = ru. If you need some other language
kmap just make one yourself. Look into kmap.h it's really simple.
48. Improvement to change 37. Now when in the prompt ^v will bring
up the latest command from history. Also the history works for
searches via / or ? the same way. keybind v; does the same but from
normal mode, to save time.
49. While in insert mode or in prompt ^x will exit the mode but
any change done on the line will be discarded. 
That means there are 4 ways to exit insert|prompt now: ^x, ^c, ESC, kj 
50. Added ability to edit the line while in insert mode (not change mode)
such that backspace can delete all the characters on the line,
when no more characters left the line will be wrapped onto the next
one. This is behavior you can expect from 95% of editors, now neatvi
is not an exception. The same change was done for ^w keybind. 
51. Added key to show the registers and their contents. keybind: R
52. Added a key to perform relative replacement. keybind: ve
Specify arg and the prompt will be for example :.,+5s/ where 5 is
the argument.
53. Added a key to disable autoindent. keybind: va
This is necessary sometimes if you want to paste from system clipboard.
54. Added minimal syntax highlight for js and html
55. Substitute commands now have a proper redo-undo savepoint

FAQ:
----
Q: Why neatvi instead of vim?
A: Because it's just too damn difficult to do customization in source code. There
is lots of baggage like python (+100MB++) ugly vimscript, dependency hell and I
know that my brain is only extent of my skull. So this fork is not really meant
to make clone version of vim, but more like a repo of specific patches so that
if anybody wants to add features to their neatvi they might find it implemented
here and save brain cycles thinking on how to do something.

Q: Why not let user choose filemanager
A: If you are here only for the editor, you can remove hund
by removing hund.o in Makefile and remove line of code in
vi.c that is hund(); This is trivial because there are no
direct vi -> hund dependencies, only hund -> vi. That should
also free up about 80K of memory from the executable.

Q: Why not distribute as patches, like on suckless.org?
A:  It's hard to maintain, say this repo have 35 patches, so it will
be 35+ diffs. And each time something will mess up because one file change
will require to change every patch offset, etc.

Q: General philosophy?
A: User is programmer, hacker culture.

CONFIGURATION
-------------

Edit conf.h to adjust syntax highlighting rules and text direction
patterns.  To define a new keymap, create a new array in kmap.h, like
kmap_fa, and add it to kmaps array in the same header (the first entry
of the new array specifies its name).  The current keymap may be
changed with :cm ex command.  When in input mode, ^e activates the
English kaymap and ^f switches to the alternate keymap (the last
keymap specified with :cm).

COMMANDS
--------

Commands not available in ex(1):

:cm[ap][!] [kmap]
  Without kmap, prints the current keymap name.
  When kmap is specified, sets the alternate keymap to
  kmap and, unless ! is given, switches to this keymap.
:ft [filetype]
  Without filetype, prints the current file type.
  When filetype is specified, sets the file type of the
  current ex buffer.

New key mappings:
^a in normal mode: searches for the word under the cursor.
^p in insert mode: inserts the contents of the default yank buffer.
zL, zl, zr, and zR in normal mode: change the value of td option.
^e and ^f in insert mode: switch to the English and alternate keymap.
ze and zf in normal mode: switch to the English and alternate keymap.
gu, gU, and g~ in normal mode: switch character case.
^l in normal mode: updates terminal dimensions (after resizing it).

OPTIONS
-------

To improve neatvi's performance, shaping, character reordering, and
syntax highlighting can be disabled by defining the EXINIT environment
variable as "set noshape | set noorder | set nohl | set td=+2".

Options supported in neatvi:

td, textdirection
  Current direction context.  The following values are meaningful:
  * +2: always left-to-right.
  * +1: follow conf.h's dircontexts[]; left-to-right for others.
  * -1: follow conf.h's dircontexts[]; right-to-left for others.
  * -2: always right-to-left.
shape
  If set (default), performs Arabic/Farsi letter shaping.
order
  If set, reorder characters based on the rules defined
  in conf.h.
hl, highlight
  If set (default), text will be highlighted based on syntax
  highlighting rules in conf.h.
hll, highlightline
  If set, highlight current line.
ai, autoindent
  As in vi(1).
aw, autowrite
  As in vi(1).
ic, ignorecase
  As in vi(1).

MARKS AND BUFFERS
-----------------

Special marks:
* the position of the previous change
[ the first line of the previous change
] the last line of the previous change

Special yank buffers:
/ the previous search keyword
: the previous ex command
